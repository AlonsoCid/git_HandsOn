#Peaks from section 4: analyses/peaks.analysis/peaks.outside.sigmoid_colon.txt and analyses/peaks.analysis/peaks.outside.stomach.txt

#Activate docker (repeat every restart)
sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course


#Task 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

mkdir -m 777 regulatory_elements
mkdir -m 777 regulatory_elements/analyses

cd regulatory_elements

#Task 2: Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they? 13251 for colon and 12431 for stomach.

##Download peak calling files
for mod in H3K27ac H3K4me1 
do
    echo $mod
    grep -F $mod ../ChIP-seq/metadata.tsv | \
    grep -F "bigBed_narrowPeak" | \
    grep -F "pseudoreplicated_peaks" | \
    grep -F "GRCh38" | \
    awk 'BEGIN{FS=OFS="\t"}{print $1, $11}' | \
    sort -k2,2 -k1,1r | \
    sort -k2,2 -u > analyses/bigBed.$mod.peaks.ids.txt
done

mkdir -m 777 data
mkdir -m 777 data/H3K27ac
mkdir -m 777 data/H3K4me1
mkdir -m 777 analyses/peaks.analysis

for mod in H3K27ac H3K4me1
do
    cut -f1 analyses/bigBed.$mod.peaks.ids.txt | \
    while read filename; do
        echo $filename
        wget -P data/$mod "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
    done
done

##check download integrity
for mod in H3K27ac H3K4me1
do
    echo $mod

    ../bin/selectRows.sh <(cut -f1 analyses/bigBed.$mod.peaks.ids.txt) ../ChIP-seq/metadata.tsv | cut -f1,46 > data/$mod/md5sum.txt

    cat data/$mod/md5sum.txt | \
    while read filename original_md5sum; do
        md5sum data/$mod/"$filename".bigBed | \
        awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" ";OFS="\t"}{print filename, original_md5sum, $1}'
    done > tmp

    mv tmp data/$mod/md5sum.txt
    awk '$2!=$3' data/$mod/md5sum.txt
done

##Convert bigBed files into BED files
for file in H3K27ac H3K4me1
do
    echo $file
    cut -f1 analyses/bigBed.$file.peaks.ids.txt | \
    while read filename; do
        bigBedToBed data/$file/"$filename".bigBed data/$file/"$filename".bed
    done
done

##Get overlapping genes between H3K27ac and H3K4me1 for each tissue (Sigmaoid_colon: 8627 / Stomach: 5148, 13775 in total)
cut -f-2 analyses/bigBed.H3K27ac.peaks.ids.txt | \
while read filename tissue; do
    echo "$tissue"
    bedtools intersect -a ../ATAC-seq/data/bed.files/ATAC_seq_peaks_outside_genes_"$tissue".bed -b data/H3K27ac/"$filename".bed -u > data/common_peaks_H3K27ac_"$tissue".bed
done

cut -f-2 analyses/bigBed.H3K4me1.peaks.ids.txt | \
while read filename tissue; do
    echo "$tissue"
    bedtools intersect -a data/common_peaks_H3K27ac_"$tissue".bed -b data/H3K4me1/"$filename".bed -u > data/common_peaks_H3K27ac_H3K4me1_"$tissue".bed
done

wc -l data/common_peaks_H3K27ac_H3K4me1_*.bed

#Task 3: Focus on regulatory elements that are located on chromosome 1, and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region.

mkdir -m 777 analyses/chromosome_1_analysis
mkdir -m 777 analyses/chromosome_1_analysis/distances

for tissue in sigmoid_colon stomach
do
    echo $tissue
    grep -w chr1 data/common_peaks_H3K27ac_H3K4me1_"$tissue".bed | \
    awk 'BEGIN{FS=OFS="\t"}{print $4, $2}' > analyses/chromosome_1_analysis/regulatory.elements.starts."$tissue".tsv
done

#Task 4: Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates (../ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed), prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3').

grep -w chr1 ../ChIP-seq/annotation/gencode.v24.protein.coding.gene.body.bed |
awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' > analyses/chromosome_1_analysis/gene.starts.tsv


#Task 5: Download or copy this python script inside the epigenomics_uvic/bin folder.

wget -P ../bin https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/get.distance.py

python ../bin/get.distance.py -h

#This script takes as input two distinct arguments: 1) --input corresponds to the file gene.starts.tsv (i.e. the file you generated in Task #4); 2) --start corresponds to the 5' coordinate of a regulatory element. Complete the python script so that for a given coordinate --start the script returns the closest gene, the start of the gene and the distance of the regulatory element.

##Modified script
:<<'END'

#!/usr/bin/env python

#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser

#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()

open_input = open(options.input)
enhancer_start = int(options.start)

#********
# BEGIN *
#********

x = 1000000  # set maximum distance to 1 Mb
selectedGene = ""  # initialize the gene as empty
selectedGeneStart = 0  # initialize the start coordinate of the gene as 0

for line in open_input.readlines():  # for each line in the input file
    gene, position = line.strip().split('\t')  # split the line into two columns based on a tab
    position = int(position)  # convert the start of the gene to an integer
    distance = abs(position - enhancer_start)  # compute the absolute value of the difference between position and enhancer_start

    if distance < x:  # if this absolute value is lower than x
        x = distance  # this value will now be your current x
        selectedGene = gene  # save gene as selectedGene
        selectedGeneStart = position  # save position as selectedGeneStart

print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))

END

##Testing the script. (Result: ENSG00000187642.9	982093	2093)
python ../bin/get.distance.py --input analyses/chromosome_1_analysis/gene.starts.tsv --start 980000


#Task 6. For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above.

for tissue in sigmoid_colon stomach
do
    echo $tissue
    cat analyses/chromosome_1_analysis/regulatory.elements.starts."$tissue".tsv | \
    while read element start; do
        python ../bin/get.distance.py --input analyses/chromosome_1_analysis/gene.starts.tsv --start $start
    done > analyses/chromosome_1_analysis/distances/regulatoryElements.genes.distances."$tissue".tsv
done



#Task 7: Use R to compute the mean and the median of the distances stored in analyses/regulatoryElements.genes.distances.tsv

nano ../bin/mean_median.R

#Script inside mean_median.R
:<<'END'

args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]

data <- read.table(input_file, header=FALSE, sep="\t")
distances <- data$V3
mean_distance <- mean(distances, na.rm = TRUE)
median_distance <- median(distances, na.rm = TRUE)

cat("Mean distance: ", mean_distance, "\n")
cat("Median distance: ", median_distance, "\n")

END

##Give it execution permission
chmod +x ../bin/mean_median.R

#Execute the R script
Rscript ../bin/mean_median.R analyses/chromosome_1_analysis/distances/regulatoryElements.genes.distances.sigmoid_colon.tsv

Rscript ../bin/mean_median.R analyses/chromosome_1_analysis/distances/regulatoryElements.genes.distances.stomach.tsv

### Sigmoid_colon. Mean distance: 73067.4 / Median distance: 36045
### Stomach. Mean distance: 47013.77 / Median distance: 27773.5
